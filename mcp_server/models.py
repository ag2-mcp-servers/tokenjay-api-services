# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:32:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Action(BaseModel):
    id: Optional[str] = None


class AddRequestResponse(BaseModel):
    ergoPayUrl: str
    requestId: str


class AgeUsdExchangeInfo(BaseModel):
    bankFeeAmount: int
    bankFeeDescription: str
    ergAmount: int
    ergAmountDescription: str
    exchangeRate: int
    jayFeeAmount: int
    jayFeeDescription: str
    totalAmount: int


class AgeUsdInfo(BaseModel):
    reserveRatio: int
    sigRsvPrice: int
    sigUsdPrice: int


class CreatePaymentRequest(BaseModel):
    message: Optional[str] = None
    nanoErg: int
    receiverAddress: str
    senderAddress: Optional[str] = None
    tokenId: Optional[str] = None
    tokenRawAmount: Optional[int] = None


class MessageSeverity(Enum):
    NONE = 'NONE'
    INFORMATION = 'INFORMATION'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


class ErgoPayResponse(BaseModel):
    address: Optional[str] = None
    addresses: Optional[List[str]] = None
    message: Optional[str] = None
    messageSeverity: Optional[MessageSeverity] = None
    reducedTx: Optional[str] = None
    reducedTxList: Optional[List[str]] = None
    replyTo: Optional[str] = None


class FetchActionResponse(BaseModel):
    action: Optional[Action] = None
    appVersion: Optional[int] = None


class GenuineToken(BaseModel):
    issuer: Optional[str] = None
    tokenId: str
    tokenName: str
    uniqueName: bool


class TargetCanvasDimension(Enum):
    COMPACT_WIDTH = 'COMPACT_WIDTH'
    MEDIUM_WIDTH = 'MEDIUM_WIDTH'
    FULL_WIDTH = 'FULL_WIDTH'


class MosaikManifest(BaseModel):
    appDescription: Optional[str] = None
    appName: Optional[str] = None
    appVersion: Optional[int] = None
    cacheLifetime: Optional[int] = None
    errorReportUrl: Optional[str] = None
    iconUrl: Optional[str] = None
    notificationCheckUrl: Optional[str] = None
    onAppLoadedAction: Optional[str] = None
    onResizeAction: Optional[str] = None
    targetCanvasDimension: Optional[TargetCanvasDimension] = None
    targetMosaikVersion: Optional[int] = None


class NodePeer(BaseModel):
    blockHeight: int
    blockchainApi: bool
    headerHeight: int
    lastSeen: int
    name: str
    openRestApi: bool
    responseTime: int
    url: str


class NotificationCheckResponse(BaseModel):
    message: Optional[str] = None
    messageTs: Optional[int] = None
    nextCheck: Optional[int] = None


class PaymentRequestState(Enum):
    CREATED = 'CREATED'
    WAITING = 'WAITING'
    EXECUTED = 'EXECUTED'
    INVALID = 'INVALID'


class PaymentRequestStateResponse(BaseModel):
    paymentRequestState: PaymentRequestState
    requestId: str
    txId: Optional[str] = None


class TokenPrice(BaseModel):
    available: int
    displayName: str
    lastUpdated: int
    price: int
    tokenId: str
    volumeLastDay: int


class ViewElement(BaseModel):
    id: Optional[str] = None
    onClickAction: Optional[str] = None
    onLongPressAction: Optional[str] = None
    visible: Optional[bool] = None


class MosaikBabelfeeNewofferDoitPostRequest(
    RootModel[Optional[Dict[str, Dict[str, Any]]]]
):
    root: Optional[Dict[str, Dict[str, Any]]] = None


class MosaikBabelfeeNewofferNewInputPostRequest(
    RootModel[Optional[Dict[str, Dict[str, Any]]]]
):
    root: Optional[Dict[str, Dict[str, Any]]] = None


class MosaikTokenburnPreparePostRequest(RootModel[Optional[Dict[str, Dict[str, Any]]]]):
    root: Optional[Dict[str, Dict[str, Any]]] = None


class PeersListGetResponse(RootModel[List[NodePeer]]):
    root: List[NodePeer]


class TokensListBlockedGetResponse(RootModel[List[str]]):
    root: List[str]


class TokensListGenuineGetResponse(RootModel[List[GenuineToken]]):
    root: List[GenuineToken]


class TokensPricesAllGetResponse(RootModel[List[TokenPrice]]):
    root: List[TokenPrice]


class CheckResponse(BaseModel):
    genuine: int = Field(
        ...,
        description='Flag with 0 unknown, 1 verified, 2 suspicious, 3 blocked (see EIP-21)',
    )
    token: Optional[GenuineToken] = None


class MosaikApp(BaseModel):
    actions: Optional[List[Action]] = None
    manifest: Optional[MosaikManifest] = None
    view: Optional[ViewElement] = None
